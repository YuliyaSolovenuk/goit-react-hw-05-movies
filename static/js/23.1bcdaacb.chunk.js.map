{"version":3,"file":"static/js/23.1bcdaacb.chunk.js","mappings":"uNA2CA,UAvCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,IAdAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAECC,EAAAA,EAAAA,IAAgBJ,GAFjB,OAEhBK,EAFgB,OAItBN,EAAWM,GAJW,gDAMtBC,QAAQC,MAAR,MANsB,yDAAH,qDAUvBJ,GACD,GAAE,CAACH,IAECF,EAEL,OACE,0BACE,wBACGA,EAAQU,OACPV,EAAQW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC9B,OACE,2BACE,wCAAkBF,MAClB,uBAAIC,MAFGC,EAKZ,KAED,uEAKT,C,+LCvCDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGHC,EAAiB,mCAAG,sGACTF,EAAAA,EAAAA,IAAA,sCAAyCC,IADhC,uBACvBE,EADuB,EACvBA,KADuB,kBAEtBA,EAAKC,SAFiB,2CAAH,qDAKjBC,EAAe,mCAAG,WAAOC,GAAP,yFACPN,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDK,IAD7C,uBACrBH,EADqB,EACrBA,KADqB,kBAEvBA,EAAKC,SAFkB,2CAAH,sDAKfG,EAAe,mCAAG,WAAOC,GAAP,yFACPR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,mCAAuDP,IADhD,uBACrBE,EADqB,EACrBA,KADqB,kBAEvBA,GAFuB,2CAAH,sDAKfM,EAAY,mCAAG,WAAOD,GAAP,yFACJR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,4BAAgDP,IAD5C,uBAClBE,EADkB,EAClBA,KADkB,kBAEpBA,EAAKO,MAFe,2CAAH,sDAKZnB,EAAe,mCAAG,WAAOiB,GAAP,yFACPR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,2CAA+DP,IADxD,uBACrBE,EADqB,EACrBA,KADqB,kBAEvBA,EAAKC,SAFkB,2CAAH,qD","sources":["components/reviews/Reviews.jsx","services/TmdbAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/TmdbAPI';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const response = await getMovieReviews(movieId);\n\n        setReviews(response);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  if (!reviews) return;\n\n  return (\n    <div>\n      <ul>\n        {reviews.length ? (\n          reviews.map(({ author, content, id }) => {\n            return (\n              <li key={id}>\n                <h4>Author:&nbsp;{author}</h4>\n                <p>{content}</p>\n              </li>\n            );\n          })\n        ) : (\n          <p>We don't have any reviews for this movie</p>\n        )}\n      </ul>\n    </div>\n  );\n};\nexport default Reviews;\n","import axios from \"axios\";\n\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1bb674914a73bcdd70cc8fd8d868be33';\n\n\nexport const getTrendingMovies = async () => {\n   const {data} = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return data.results; \n};\n\nexport const getSearchMovies = async (searchQuery) => {\n   const {data} = await axios.get(`/search/movie?api_key=${API_KEY}&query=${searchQuery}`);\n return data.results;\n};\n\nexport const getMovieDetails = async (movie_id) => {\n   const {data} = await axios.get(`/movie/${movie_id}?language=en-US&api_key=${API_KEY}`);\n return data;\n};\n\nexport const getMovieCast = async (movie_id) => {\n   const {data} = await axios.get(`/movie/${movie_id}/credits?api_key=${API_KEY}`);\n return data.cast;\n};\n\nexport const getMovieReviews = async (movie_id) => {\n   const {data} = await axios.get(`/movie/${movie_id}/reviews?language=en-US&api_key=${API_KEY}`);\n return data.results;\n};"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","fetchMovieReviews","getMovieReviews","response","console","error","length","map","author","content","id","axios","API_KEY","getTrendingMovies","data","results","getSearchMovies","searchQuery","getMovieDetails","movie_id","getMovieCast","cast"],"sourceRoot":""}