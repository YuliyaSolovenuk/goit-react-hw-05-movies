{"version":3,"file":"static/js/36.3fc5bd2a.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/moviesList/MoviesList.module.css?a81a","components/moviesList/MoviesList.jsx","webpack://goit-react-hw-05-movies/./src/components/searchForm/SearchForm.module.css?1aef","components/searchForm/SearchForm.jsx","pages/Movie.jsx","services/TmdbAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"titlePage\":\"MoviesList_titlePage__nO1-F\",\"moviesList\":\"MoviesList_moviesList__46PAX\",\"itemMovie\":\"MoviesList_itemMovie__WehD3\",\"img\":\"MoviesList_img__XDovE\",\"titleMovie\":\"MoviesList_titleMovie__nMun3\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesList.module.css';\nimport fallbackImage from '../../image/no-photo.png'\n\nconst MoviesList = ({ movies, title }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <h1 className={css.titlePage}>{title}</h1>\n      <ul className={css.moviesList}>\n        {movies.map(({ id, title, poster_path }) => (\n          <li className={css.itemMovie} key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n            <div className={css.link}>\n              <img\n                className={css.img}\n                src={poster_path ? (`https://image.tmdb.org/t/p/w300/${poster_path}`) : fallbackImage}\n                alt={title}\n              />\n             <p className={css.titleMovie}>{title}</p></div>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ).isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"SearchForm_searchForm__Rrjro\",\"searchFormButton\":\"SearchForm_searchFormButton__q+V9f\",\"searchFormButtonLabel\":\"SearchForm_searchFormButtonLabel__QMEmQ\",\"searchFormInput\":\"SearchForm_searchFormInput__zLhEH\"};","import PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { FaSearch } from 'react-icons/fa';\nimport css from './SearchForm.module.css';\nimport { useState } from 'react';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n  const handleChange = e => {\n    setQuery(e.currentTarget.value);\n  };\n\n  const handleSubmitSearch = e => {\n    e.preventDefault();\n    if (!query.trim()) {\n      toast('Enter a search query!');\n      return;\n    }\n    onSubmit(query);\n    setQuery('');\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <form className={css.searchForm} onSubmit={handleSubmitSearch}>\n        <button type=\"submit\" className={css.searchFormButton}>\n          <span className={css.searchFormButtonLabel}>\n            <FaSearch style={{ fontSize: '1.4rem' }} />\n          </span>\n        </button>\n\n        <input\n          className={css.searchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search\"\n          onChange={handleChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import { toast } from 'react-toastify';\nimport MoviesList from 'components/moviesList/MoviesList';\nimport SearchForm from 'components/searchForm/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { getSearchMovies } from 'services/TmdbAPI';\nimport { useSearchParams } from \"react-router-dom\";\n\nconst Movie = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get(\"query\");\n\n  useEffect(() => {\n\n    const fetchSearchMovies = async () => {\n  \n      try {\n        const response = await getSearchMovies(searchQuery);\n\n        setMovies(response);\n\n        if (response.length === 0 && searchQuery !== '') {\n          toast(\n            'Sorry, there are no images matching your search query. Please try again.'\n          );\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchSearchMovies();\n  }, [searchQuery]);\n\n  const handleFormSubmit = query => {\n    if (searchQuery === query) {\n      toast(\n        'Please enter a new keyword to search.The result of this query is displayed.'\n      );\n      return;\n    }\n\n    setSearchParams({query});\n    setMovies([]);\n  };\n\n  return (\n    <div>\n      <SearchForm onSubmit={handleFormSubmit} />\n      {searchQuery && movies && (\n        <MoviesList movies={movies} title={'Movies by search query'} />\n      )}\n    </div>\n  );\n};\n\nexport default Movie;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1bb674914a73bcdd70cc8fd8d868be33';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport const getSearchMovies = async searchQuery => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n  return data.results;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const { data } = await axios.get(\n    `/movie/${movie_id}?language=en-US&api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getMovieCast = async movie_id => {\n  const { data } = await axios.get(\n    `/movie/${movie_id}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const { data } = await axios.get(\n    `/movie/${movie_id}/reviews?language=en-US&api_key=${API_KEY}`\n  );\n  return data.results;\n};\n"],"names":["movies","title","location","useLocation","className","css","map","id","poster_path","to","state","from","src","fallbackImage","alt","onSubmit","useState","query","setQuery","e","preventDefault","trim","target","reset","toast","type","style","fontSize","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","setMovies","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","fetchSearchMovies","getSearchMovies","response","length","console","error","MoviesList","axios","API_KEY","getTrendingMovies","data","results","getMovieDetails","movie_id","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}